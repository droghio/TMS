function saveprogress(step)
    local file = fs.open("/progress", "w")
    file.write(step)
    file.close()
end

function loadprogress()
    local file = fs.open("/progress", "r")
    local progress = 0
    if file then
        progress = file.readAll()
    else
        return 0
    end
    return tonumber(progress)
end


function attemptfix(error)
    if (error == "out of fuel") then
       tryrefuel()
    elseif (error == "out of needed items") then
        tryplace()
    elseif error == "block in the way" then
        sleep(60)
    end
end

function tryplace()
  while not turtle.placeDown() do
    print("Attempting place.")
    sleep(5)
  end
end

function tryrefuel()
    print("Attempting refuel.")
    turtle.refuel()
    sleep(5)
end

function reportError(reason)
   print("Error: "..reason)
   attemptfix(reason)
end

function checkSupplies(num)
  print("Checking supplies for slot "..num)
  if turtle.getItemCount(num) <= 5 then
    for i = num+1, 16 do
      print("Scanning for more items.")
      turtle.select(num)
      if turtle.compareTo(i) then
        print("Found item in slot "..i)
        print("Attempting item transfer.")
        turtle.select(i)
        turtle.transferTo(num)
        break
      end
    end
  end
end

    
function place(slot)
    checkSupplies(slot)
    if not turtle.select(slot) then
        reportError("index of slot out of range")
    elseif not turtle.placeDown() then
        if turtle.getItemCount(slot) == 0 then
            reportError("out of needed items")
        elseif turtle.detectDown() then
            reportError("block already there")
        else
            reportError("unknown placement error")
        end
    end
end

function move_in_dir(dir)
    if dir == "f" then
        return turtle.forward()
    elseif dir == "b" then
        return turtle.back()
    elseif dir == "l" then
        return turtle.turnLeft() and turtle.forward() and turtle.turnRight()
    elseif dir == "r" then
        return turtle.turnRight() and turtle.forward() and turtle.turnLeft()
    elseif dir == "u" then
        return turtle.up()
    elseif dir == "d" then
        return turtle.down()
    else
        reportError("invalid direction")
    end
end

function move(dir)
    local attempts = 0
    while not move_in_dir(dir) do
        if turtle.getFuelLevel() == 0 then
            reportError("out of fuel")
        elseif turtle.detect() then
            reportError("block in the way")
        else
            reportError("unknown movement error")
        end
    end
end


function openFile(filepath)
    local file = fs.open(filepath, "r")
    local tmpdata = file.readAll()
    
    file.close()
    return textutils.unserialize(tmpdata)
end

function build(data, progress)
   local maxy = 4 --table.getn(data[1]) --data["length"]
   local currenty = 1 --Isiah fix
   local dir = "f" --data["direction"]
   
   move("f")
   
   local counter = 0
   while currenty <= table.getn(data) do
   print("New layer, number: "..currenty)
   for _,value in ipairs(data[currenty]) do --Isiah fix
    --must use ipairs to ignore length and direction parameters in table
    
        if progress > 1 then
           progress = progress - 1
           
        elseif progress == 1 then
            progress = 0
            move("d")
            move("f")
        
        else
            if counter % maxy == 0 then
                print("Moving up.")
                --currenty = currenty + 1 --Isiah fix
                counter = 0 --Isiah fix
                move("u")
                move("b")
                if not (turtle.turnLeft() and turtle.turnLeft()) then
                    if turtle.getFuelLevel() == 0 then
                        reportError("out of fuel")
                    else
                        reportError("unknown turning error")
                    end
                end
            end
            if value ~= 0 then place(value) end
            --saveprogress(counter+currenty*maxy)
            
            move(dir)
            counter = counter + 1
        end   
   end
   
   currenty = currenty + 1     
  
   end
end

function main()
    
    print("Loading data...")
    local data = openFile("tower.slc")
    print(loadprogress())
    local loadedprogress = loadprogress()
    
    if loadedprogress ~= 0 then
        print("Previous session found.")
        print("Resuming from step "..loadedprogress)
    end
    
    print("Data loaded.")
    print("Beginning construction.")
    build(data, loadedprogress)
    
    fs.delete("/progress")
    
end

main()
--[[turtle.back()
while turtle.down() do end
print(turtle.getFuelLevel())]]--